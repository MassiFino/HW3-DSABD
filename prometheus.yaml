apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["networking.k8s.io"]
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
  - kind: ServiceAccount
    name: prometheus
    namespace: default
---

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  labels:
    name: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 30s  # Intervallo di scraping globale
      evaluation_interval: 30s  # Intervallo di valutazione globale
      external_labels:
        monitor: 'DSBD'
    alerting:
      alertmanagers:
      - static_configs:
        - targets:
          - "alertmanager-service:9093"
    rule_files:
      - /etc/prometheus/alert.rules
      
    scrape_configs:
      # Job per Prometheus stesso
      - job_name: 'prometheus'
        scrape_interval: 25s
        metrics_path: '/metrics'
        static_configs:
          - targets: ['localhost:9090']


      # Job per alert-notifier
      - job_name: 'alert-notifier'
        scrape_interval: 30s
        metrics_path: '/metrics'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: alert-notifier
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

      # Job per data-collector
      - job_name: 'data-collector'
        scrape_interval: 30s
        metrics_path: '/metrics'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: data-collector
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

      # Job per alert-system
      - job_name: 'alert-system'
        scrape_interval: 30s
        metrics_path: '/metrics'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: alert-system
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

      # Job per server
      - job_name: 'server'
        scrape_interval: 30s
        metrics_path: '/metrics'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: server
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod

      # Job per telegram-bot
      - job_name: 'telegram-bot'
        scrape_interval: 30s
        metrics_path: '/metrics'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_label_app]
            action: keep
            regex: telegram-bot
          - source_labels: [__meta_kubernetes_service_name]
            target_label: service
          - source_labels: [__meta_kubernetes_pod_name]
            target_label: pod
                      
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  labels:
    app: prometheus
  namespace: default
data:
  alert.rules: |
    groups:
    - name: prometheus-alerts
      rules:
      - alert: service_down  
        expr: up == 0        
        for: 30s             
        labels:               
          severity: page      
        annotations:          
          summary: "Instance {{ $labels.instance }} down"
          description: "{{ $labels.instance }} of job {{ $labels.job }} has been down for more than 30 seconds."

      - alert: high_load
        expr: node_load1 > 0.8
        for: 30s
        labels:
          severity: page
        annotations:
          summary: "Instance {{ $labels.instance }} under high load"
          description: "{{ $labels.instance }} of job {{ $labels.job }} is under high load."

      - alert: site_down
        expr: probe_success < 1
        for: 30s
        labels:
          severity: page
        annotations:
          summary: "Site Down: {{$labels.instance}}"
          description: "Site Down: {{$labels.instance}} for more than 30 seconds"

      - alert: HighRequestDuration
        expr: histogram_quantile(0.8, rate(request_duration_seconds_bucket[10m])) > 2
        for: 0m
        labels:
          severity: warning
        annotations:
          summary: "High request duration for service: {{ $labels.service }}, method: {{ $labels.method }}."
          description: "The 80th percentile of request duration for method {{ $labels.method }} has exceeded 2 seconds over the last 10 minutes for the service running on node: {{ $labels.node }}."
      
      - alert: TestAlert
        expr: vector(1) > 0
        for: 30s
        labels:
          severity: page
        annotations:
          summary: "This is a test alert"
          description: "This is a test alert for testing purposes"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus-deployment
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
        - name: prometheus
          image: prom/prometheus
          args:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus/"
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus/prometheus.yml
              subPath: prometheus.yml
            - name: prometheus-rules
              mountPath: /etc/prometheus/alert.rules
              subPath: alert.rules
            - name: prometheus-storage
              mountPath: /prometheus/
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
        - name: prometheus-rules
          configMap:
            name: prometheus-rules
            items:
              - key: alert.rules
                path: alert.rules
        - name: prometheus-storage
          persistentVolumeClaim:
            claimName: prometheus-pvc
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9090'
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
    - port: 9090
      targetPort: 9090
      nodePort: 30090
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: default
  labels:
    app: prometheus
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi